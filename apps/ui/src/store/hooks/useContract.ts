import { RootState } from '..';
import { useDispatch, useSelector } from 'react-redux';
import * as ContractStore from '../contract/contractSlice';
import { AccountUpdate, Mina, PrivateKey } from 'o1js';
import configJson from '../../../../../packages/contracts/config.json';
import { useEffect } from 'react';
export const config = configJson.deployAliases['token'];

// TODO feepayerKeysBase58 is a private keys generated by deployed contract.
const feepayerKeysBase58: { privateKey: string; publicKey: string } = {
    privateKey: 'privateKey',
    publicKey: 'publicKey',
};

const fee = Number('0.1') * 1e9;
const reciver = 'B62qk1sJumHSS1hPKS2fSAbxkkwGcCiieb1PcM4PB182pa1MKE9H9AV';

export const useContract = () => {
    const dispatch = useDispatch();

    const contract = useSelector<RootState, ContractStore.IContractData>((state) => state.contract);
    const setZkApp = (payload: any) => dispatch(ContractStore.setZkApp(payload));
    const feepayerKey = PrivateKey.fromBase58(feepayerKeysBase58.privateKey);

    const feepayerAddress = feepayerKey.toPublicKey();
    const zkAppKey = PrivateKey.random();
    // @ts-ignore
    const zkApp = new BasicContract(zkAppAddress);
    const init = async () => {
        const { BasicContract } = await import('../../../../../packages/contracts/build/src');
        // TODO add store for saving privateKey
        // let zkAppKey = PrivateKey.fromBase58(privateKey.toString());

        const Network = Mina.Network(config.url);

        Mina.setActiveInstance(Network);

        await BasicContract.compile();

        setZkApp(zkApp);
    };

    const sendToken = async (amount) => {
        const zkAppAddress = zkAppKey.toPublicKey();

        const sendAmount = Number(amount) * 1e9;

        const send_txn = await Mina.transaction({ sender: feepayerAddress, fee: fee, memo: 'send' }, () => {
            const accountUpdate = AccountUpdate.fundNewAccount(feepayerAddress);
            console.log(accountUpdate);
            // accountUpdate.send({ to: receiverPublicKey, amount: sendAmount });

            contract?.zkApp.transfer(zkAppAddress, reciver, sendAmount);
        });

        await send_txn.prove();
        await send_txn.sign([feepayerKey, zkAppKey]).send();
    };
    useEffect(() => {
        init();
    }, []);

    return {
        contract,
        sendToken,
    };
};
